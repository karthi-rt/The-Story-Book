package com.rt.storybooklibrary.activity.detail

import android.content.Intent
import android.os.Bundle
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.lifecycle.ViewModelProvider
import com.rt.storybooklibrary.activity.update.UpdateStoryActivity
import com.rt.storybooklibrary.databinding.ActivityStoryDetailBinding
import com.rt.storybooklibrary.viewmodel.BookViewModel

class StoryDetailActivity : AppCompatActivity() {

    private lateinit var binding: ActivityStoryDetailBinding
    private lateinit var mBookViewModel: BookViewModel
    private var bookId: Int = -1

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        binding = ActivityStoryDetailBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // Handle system bars for edge-to-edge display
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        // Initialize ViewModel
        mBookViewModel = ViewModelProvider(this)[BookViewModel::class.java]

        // Retrieve story ID from the Intent
        bookId = intent.getIntExtra("storyId", -1)
        if (bookId == -1) {
            finish() // Close activity if no valid ID is provided
            return
        }

        // Observe and update UI with story details
        observeStoryDetails()

        // Set up Edit button click listener
        binding.ivEdit.setOnClickListener {
            navigateToUpdateStoryActivity()
        }

        // Set up Back button click listener
        binding.ivBack.setOnClickListener {
            finish()
        }
    }

    private fun observeStoryDetails() {
        mBookViewModel.getBookById(bookId).observe(this) { book ->
            if (book != null) {
                binding.tvTitle.text = book.title
                binding.tvSummary.text = book.summary
                binding.tvCategory.text = book.category
                binding.tvAuthor.text = book.author
                binding.tvTags.text = book.tags
            } else {
                // Handle the case where the book is not found
                binding.tvTitle.text = "Story not found"
                binding.tvSummary.text = ""
                binding.tvCategory.text = ""
                binding.tvAuthor.text = ""
                binding.tvTags.text = ""
            }
        }
    }

    private fun navigateToUpdateStoryActivity() {
        val intent = Intent(this, UpdateStoryActivity::class.java).apply {
            putExtra("updateId", bookId)
            putExtra("updateTitle", binding.tvTitle.text.toString())
            putExtra("updateSummary", binding.tvSummary.text.toString())
            putExtra("updateCategory", binding.tvCategory.text.toString())
            putExtra("updateAuthor", binding.tvAuthor.text.toString())
            putExtra("updateTags", binding.tvTags.text.toString())
        }
        startActivity(intent)
    }
}
